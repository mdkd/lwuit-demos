List Demo shows how to create different types of lists using LWUIT.

== Design ==

This application shows how to create different types of lists using LWUIT. The lists presented in the application are:

- The implicit list can be used for drill downs. The list closes after an item is selected.
- The implicit + action example shows how to use Commands with lists.
- Truncated shows an implicit list where the list items are truncated to fit in one row.
- Wrapped shows an implicit list where the texts are wrapped to multiple lines.
- Thumbnails shows an implicit list with thumbnail icons for each item. 
- Single choice picker displays the selected item and pops a popup menu for making a selection.
- Multiple choice picker is like single choice picker but can be used for selecting multiple items.

The application starts in a menu where you can access the list examples.

[[Image(mainlist.png)]]

== Implementation ==

The list examples are in the com.nokia.example.listdemo.lists package. All examples extend the abstract !ListView class, which provides the common functionality such as displaying the selected items in a dialog after exiting the example, and showing a confirmation query if changes have been made before exiting the example.

=== Implicit list ===

[[Image(implicit.png)]]

A list is typically created by creating and populating a list model and using it to create the List instance. !DefaultListModel is the default implementation of !ListModel interface that defines the model. You can also use an array or a Vector of Objects.

{{{#!java
// Create a list model
ListModel model = new DefaultListModel();

for (int i = 0; i < MAX_ITEMS; i++) {
    String text = LIST_ITEM_TEXT + (i + 1);
    model.addItem(text);
}

// Create a list based on the model
list = new List(model);
}}}

!ListCellRenderer handles the drawing of the list. !DefaultListCellRenderer is used by default, but here we use !NokiaListCellRenderer which adds some performance optimizations.

{{{#!java
// Create and set the list renderer
ListCellRenderer renderer = new NokiaListCellRenderer();
list.setRenderer(renderer);
}}}

!ActionListener is added for listening to action events. An event is triggered whenever user makes a selection on the list.

{{{#!java
// Add ActionListener for the list
list.addActionListener(
        new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                showSelectedDialog();
            }
        });

addComponent(list);
}}}

=== Implicit + action list ===

[[Image(implicitaction.png)]]

The implicit + action list example demonstrates how to use commands with lists. Don't set the default command on a non-touch configuration or you will override the list selection command.

{{{#!java
addCommand = new Command("add", ImageUtil.loadImage("/add_icon.png"), 0);

// ...

if (Display.getInstance().isTouchScreenDevice()) {
    setDefaultCommand(addCommand);
}

addCommand(addCommand);
}}}

=== Truncated list ===

[[Image(truncated.png)]]

This example demonstrates implicit lists with truncated items. !NokiaListCellRenderer uses caching to improve the truncation performance and is used in the example.

=== Wrapped list ===

[[Image(wrapped.png)]]

Text wrapping can be implemented with !TextAreas. The !TextArea components are put inside Containers stacked in a Form. The Containers delegate their events to Button components which handle the list selection.

{{{#!java
// Create list by stacking TextAreas
for (int i = 0; i < MAX_ITEMS; i++) {
    final int index = i;

    // Create a Container for the TextArea
    Container container = new Container(new BorderLayout());

    // Delegate all incoming events to a Button component
    Button button = new Button();
    button.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent ae) {
            selectedIndex = index;
            showSelectedDialog();
        }
    });
    container.setLeadComponent(button);

    // Create the TextArea and add it to the Container
    String text = LIST_ITEM_TEXT + (i + 1) + LONG_TEXT;
    TextArea textArea = new TextArea();
    textArea.setText(text);
    textArea.setUIID("ListItem");
    textArea.setEditable(false);
    textArea.setRows(2);
    textArea.setGrowByContent(true);
    container.addComponent(BorderLayout.CENTER, textArea);

    // Finally add the Container to the Form
    addComponent(container);
}
}}}

=== Implicit list with thumbnail pictures ===

[[Image(thumbnails.png)]]

List items can also have thumbnail pictures. Easiest way to add image icons to list items is to use Commands in the list model.


{{{#!java
ListModel model = new DefaultListModel();

for (int i = 0; i < MAX_ITEMS; i++) {
    String text = LIST_ITEM_TEXT + (i + 1);
    Command item = new Command(text, DemoMidlet.loadImage("/thumbnail_" + (i + 1) + ".png"));
    model.addItem(item);
}
}}}

=== Single choice picker ===

[[Image(SingleChoice1.png)]] [[Image(SingleChoice2.png)]]

PopupChoiceGroup is a component that displays the currently selected item, and pops up a separate dialog for making a selection.

Here's how you can create and add a PopupChoiceGroup for making a single selection out of a list.

{{{#!java
String[] choices = new String[] {"Option item 1", "Option item 2", "Option item 3"};
single = new PopupChoiceGroup("Single ChoicePicker", null, choices, PopupChoiceGroup.SINGLE);
addComponent(single);
}}}

=== Multiple choice picker ===

[[Image(MultiChoice1.png)]] [[Image(MultiChoice2.png)]]

PopupChoiceGroup can also be used for making multiple selections.

Here's how you can create and add a PopupChoiceGroup for making multiple selections out of a list. It also shows how you can display informative text in the selection dialog.

{{{#!java
String[] choices = new String[] {"Option item 1", "Option item 2", "Option item 3"};
String info = "Help text goes here. This is a demonstration of Multi ChoicePicker with help text.";
multiple = new PopupChoiceGroup("Multi ChoicePicker", info, choices, PopupChoiceGroup.MULTIPLE);
addComponent(multiple );
}}}

== Project information ==

  * Project name: [[ProjectName()]]
  * Project identifier: [[ProjectIdentifier()]]
  * Owner: [[ProjectOwner()]]
  * Create date: [[ProjectCreateDate()]]
  * Project url: [[ProjectUrl()]]
  * Version control: [[ProjectVersioncontrolUrl()]]
  * Project (WebDAV) shared folder: [[ProjectWebDavUrl()]]
  * Downloads: [wiki:Downloads]

== Release downloads ==
[[FeaturedDownloads()]]