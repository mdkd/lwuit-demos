= LWUIT Gestures Demo documentation =

LWUIT Gestures Demo is a pseudo photo gallery application for S40 devices created with LWUIT for S40 library. It shows developers how to use different types of gestures in LWUIT applications. 

== Design ==

LWUIT Gestures Demo consists of two different views: grid view for browsing and arranging images, and image view for viewing, zooming and panning images. For simplicity the images are hard coded into the application.

[[Image(wiki:WikiStart:gesturedemo_grid_screen.png)]] [[Image(wiki:WikiStart:gesturedemo_image_screen.png)]]


== Implementation ==

For overview of LWUIT gestures see the [http://projects.developer.nokia.com/LWUIT_for_Series_40/wiki/UsingGestures LWUIT wiki page].

=== Gestures in grid view ===

Grid view uses following gestures:

 * Long press gesture activates edit mode where the images can be repositioned by dragging.
 * Tap gesture opens the tapped image to image viewer.

ImageGrid class contains a private class ImageGridGestureHandler that handles the gestures .

{{{#!java
private class ImageGridGestureHandler extends GestureHandler {

    public void gestureAction(GestureEvent ge) {

        switch (ge.getType()) {
            case GestureInteractiveZone.GESTURE_TAP: {
                Component c = getComponentAt(ge.getStartX(), ge.getStartY());
                if (c != null && !editMode && c instanceof ImageCell) {
                    ImageCell ic = (ImageCell)c;
                    viewImage(ic.getImage());
                }
                break;
            }
            case GestureInteractiveZone.GESTURE_LONG_PRESS: {
                if (!editMode) {
                    setEditMode(true);
                }
                break;
            }
        }
    }
}
}}}

ImageGridGestureHandler is instantiated in the ImageGrid constructor and is set to handle gestures when the ImageGrid is displayed.
{{{#!java
ImageGridGestureHandler gestureHandler = new ImageGridGestureHandler();
GestureHandler.setFormGestureHandler(this, gestureHandler);
}}}

=== Gestures in image view ===

Image view uses following gestures:

 * Pinch gesture zooms the image.
 * Drag gesture pans the zoomed image.
 * Double-tap zooms to minimum or maximum setting depending on current zoom level.
 * Flick gesture switches to next or previous image.

ImageView class contains a private class ImageViewGestureHandler that handles the gestures. 
{{{#!java
private class ImageViewGestureHandler extends GestureHandler {

    private long previousTapTimeMs;
    private boolean pinching = false;

    public void gestureAction(GestureEvent ge) {

        switch (ge.getType()) {
            case GestureInteractiveZone.GESTURE_RECOGNITION_START: {
                pinching = false;
                break;
            }
            case GestureInteractiveZone.GESTURE_DRAG: {
                pan(panX + ge.getDragDistanceX(), panY + ge.getDragDistanceY());
                break;
            }
            case GestureInteractiveZone.GESTURE_FLICK: {
                if (zoom == 1.0 && !pinching) {
                    if (ge.getFlickSpeedX() < 0 && isNotVertical(ge)) {
                        showNextImage();
                    } 
                    else if (ge.getFlickSpeedX() > 0 && isNotVertical(ge)) {
                        showPrevImage();
                    }
                }
                break;
            }
            case GestureInteractiveZone.GESTURE_TAP: {
                long tapTimeMs = System.currentTimeMillis();
                long delta = tapTimeMs - previousTapTimeMs;
                if (delta < MAX_DOUBLE_TAP_DELTA && !pinching) {
                    if (zoom > 1.0) {
                        zoom(1.0);
                    } else {
                        zoom(MAX_ZOOM_RATIO);
                    }
                    previousTapTimeMs = 0;
                    break;
                }
                previousTapTimeMs = System.currentTimeMillis();
                break;
            }
            case GestureInteractiveZone.GESTURE_PINCH: {
                pinching = true;
                zoom(ge.getPinchDistanceChange());
                break;
            }
            default:
                break;

        }
    }
}
}}}
ImageViewGestureHandler is instantiated in the ImageView constructor and is set to handle gestures when the ImageView is displayed.
{{{#!java
ImageViewGestureHandler gestureHandler = new ImageViewGestureHandler();
GestureHandler.setFormGestureHandler(this, gestureHandler);
}}}

If the view listens for multiple gestures it might be necessary to stop acting on some gestures while another gesture is being executed. In ImageViewGestureHandler the flick gestures are ignored during pinch gestures. This prevents parts of a pinch gesture from being interpreted as flick gesture.

There is no ready-made double tap gesture. In ImageViewGestureHandler double taps are detected by calculating the interval of two tap gestures using System.currentTimeMillis().

Remember that some gesture types - or even the whole gesture API - are not supported in older targets. Use a wrapper to safely access the API if you need the application to work in old devices. The LWUIT GestureHandler class wraps some of the functionality, but it's likely you still need to use the GestureInteractiveZone and GestureEvent classes from com.nokia.mid.ui.gestures package.

=== Transitions ===

When viewing images each photo is displayed on it's own Form. This way it's easy to display a transition animation when flicking from an image to another. LWUIT provides Transition class for managing and creating transitions. In the example source code below a slide transition is created and applied to current ImageView (the ImageView class extends Form). When a new ImageView is created and shown the previously shown ImageView will smoothly slide out. 

{{{#!java
private void transitionToImage(Image image, boolean direction) {
    Transition out = CommonTransitions.createSlide(CommonTransitions.SLIDE_HORIZONTAL, direction, 500);
    setTransitionOutAnimator(out);
    ImageView imageView = new ImageView(image, imageGrid);
    imageView.show();
}
}}}

=== Image scaling ===

The displayed photos are stretched to fit the screen while preserving the aspect ratio. The image scaling is done using drawImage method of LWUIT Graphics class which allows specifying image width and height as parameters.

{{{#!java
private void calculateImageDimensions() {
    double w = (double) image.getWidth();
    double h = (double) image.getHeight();
    double aspectRatio = w / h;
    double scale;
    if (aspectRatio > 1) { // portrait
        scale = getWidth() / w;
    } else { // landscape
        scale = getHeight() / h;
    }
    scale *= zoom;
    scaledImageWidth = (int) (w * scale);
    scaledImageHeight = (int) (h * scale);
}

public void paint(Graphics g, Rectangle r) {
    calculateImageDimensions();
    int x = (getWidth() - scaledImageWidth) / 2 + panX;
    int y = (getHeight() - scaledImageHeight) / 2 + panY;
    g.drawImage(image, x, y, scaledImageWidth, scaledImageHeight);
}
}}}

=== Reordering components by dragging and dropping ===

By using LWUIT's drag&drop API adding functionality for reordering components by dragging and dropping is simple. Simply set the components draggable using their setDraggable method and set their container as drop target using the setDropTarget method.

In LWUIT GesturesDemo the ImageGrid content pane is set as drop target in the ImageGrid constructor:
{{{#!java
getContentPane().setDropTarget(true);
}}}

The ImageGrid components are set draggable/non-draggable in setComponentsDraggable method whenever setEditMode is called:
{{{#!java
private void setComponentsDraggable(boolean draggable) {
    for (int i = 0; i < getContentPane().getComponentCount(); i++) {
        getContentPane().getComponentAt(i).setDraggable(draggable);
    }
}

public void setEditMode(boolean editMode) {
    this.editMode = editMode;

    if (editMode) {
        setComponentsDraggable(true);
        setGlassPane(new EditModeGlassPane());
        removeCommand(exitCommand);
        addCommand(doneCommand);
        setDefaultCommand(doneCommand);
        repaint();
    } else {
        setComponentsDraggable(false);
        setGlassPane(null);
        setDefaultCommand(null);
        removeCommand(doneCommand);            
        setBackCommand(exitCommand);
    }
}
}}}

== Compatibility ==

LWUIT Gestures Demo is compatible with Nokia Asha devices with touch display.

It has been tested on the following devices:

 * Nokia Asha 501, 306, 311



